#
# Part of: MMUX Bash Mpfr
# Contents: core library
# Date: Sep 15, 2024
#
# Abstract
#
#	This library  must be  sourced from an  interactive shell  or from a  script.  It  loads the
#	shared library and enables the implemented builtins.
#
#	The Bash builtin "enable" will search the shared library file in the usual places, including
#	the directories from "LD_LIBRARY_PATH".
#
# Copyright (C) 2024 Marco Maggi <mrc.mgg@gmail.com>
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU
# Lesser General Public  License as published by  the Free Software Foundation, either  version 3 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that  it will be useful, but WITHOUT ANY WARRANTY; without
# even the  implied warranty of MERCHANTABILITY  or FITNESS FOR  A PARTICULAR PURPOSE.  See  the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the  GNU Lesser General Public License along with this program.
# If not, see <http://www.gnu.org/licenses/>.
#

#page
function mmux-bash-mpfr-library-load () {
    declare -g  MMUX_BASH_MPFR_LIBRARY=libmmux-bash-mpfr.so
    declare -g  MMUX_BASH_MPFR_CURRENT=@mmux_bash_mpfr_VERSION_INTERFACE_CURRENT@
    declare -g  MMUX_BASH_MPFR_REVISION=@mmux_bash_mpfr_VERSION_INTERFACE_REVISION@
    declare -g  MMUX_BASH_MPFR_AGE=@mmux_bash_mpfr_VERSION_INTERFACE_AGE@
    declare -ga MMUX_BASH_MPFR_BUILTINS=(mpfr_init mpfr_clear mpfr_init2 mpfr_inits mpfr_inits2 mpfr_clears
					 mpfr_set_default_prec mpfr_get_default_prec mpfr_get_prec mpfr_set_prec
					 mpfr_set_si mpfr_set_ui mpfr_set_sj mpfr_set_uj mpfr_set_flt mpfr_set_d mpfr_set_ld
					 mpfr_set_float128 mpfr_set_decimal64 mpfr_set_decimal128 mpfr_set
					 mpfr_set_z mpfr_set_q mpfr_set_f
					 mpfr_set_si_2exp mpfr_set_ui_2exp mpfr_set_sj_2exp mpfr_set_uj_2exp mpfr_set_z_2exp
					 mpfr_set_str mpfr_strtofr mpfr_set_nan mpfr_set_inf mpfr_set_zero
					 mpfr_swap mpfr_get_str
					 mpfr_nan_p mpfr_inf_p mpfr_zero_p mpfr_number_p mpfr_regular_p
					 mpfr_sgn
					 mpfr_dump)

    enable -f "$MMUX_BASH_MPFR_LIBRARY" mmux_bash_mpfr_library_init

    # This initialises the library.
    if mmux_bash_mpfr_library_init
    then
	declare -i IDX
	declare NAME

	for ((IDX=0; IDX < ${#MMUX_BASH_MPFR_BUILTINS[@]}; ++IDX))
	do enable -f "$MMUX_BASH_MPFR_LIBRARY" "${MMUX_BASH_MPFR_BUILTINS[$IDX]}"
	done
    fi
}

#page
function mmux-bash-mpfr-library-unload () {
    declare -i IDX

    enable -d mmux_bash_mpfr_library_init

    for ((IDX=0; IDX < ${#MMUX_BASH_MPFR_BUILTINS[@]}; ++IDX))
    do enable -d "${MMUX_BASH_MPFR_BUILTINS[$IDX]}"
    done

    enable -d "$MMUX_BASH_MPFR_LIBRARY" 'mmux_bash_mpfr_errno_to_string'

    unset -v MMUX_BASH_MPFR_LIBRARY
    unset -v MMUX_BASH_MPFR_CURRENT
    unset -v MMUX_BASH_MPFR_REVISION
    unset -v MMUX_BASH_MPFR_AGE
    unset -v MMUX_BASH_MPFR_BUILTINS

    # FIXME  For a  perfect cleanup  we should  also unset  the global  variables defined  by the  C
    # language library  initialisation builtin,  like "libc_SIZEOF_POINTER"  and all  those.  (Marco
    # Maggi; Sep 15, 2024)
}

#page
#### additional functions: printing

function mpfr_just_printit_dammit () {
    declare -i BASE=10 NDIGITS=6
    declare OPT OPTARG OPTIND OPTERR=1

    while getopts ':n:b:' OPT
    do
	case "${OPT}" in
	    n)
		NDIGITS=$OPTARG
		;;
	    b)
		BASE=$OPTARG
		;;
	    *)
		return 1
		;;
	esac
    done
    shift $((OPTIND-1))

    declare OP=${1:?"missing mandatory parameter MPFR_PTR in call to '$FUNCNAME'"}

    #echo BASE="$BASE" NDIGITS="$NDIGITS" OP="$OP" >&2

    if mpfr_nan_p "$OP"
    then printf '%s\n' '@NaN@'
    elif mpfr_inf_p "$OP"
    then
	{
	    declare SIGN

	    mpfr_sgn SIGN "$OP"
	    case "$SIGN" in
		1)
		    printf -- '+%s\n' '@Inf@'
		    ;;
		-1)
		    printf -- '-%s\n' '@Inf@'
		    ;;
		*)
		    printf -- '%s\n' '@Inf@'
		    ;;
	    esac
	}
    else
	{
	    declare MAN EXP

	    mpfr_get_str MAN EXP "$BASE" "$NDIGITS" "$OP" "$MPFR_RNDN"

	    if test "${MAN:0:1}" = '-'
	    then printf -- '-0.%se%s\n' "${MAN:1}" "$EXP"
	    else printf --  '0.%se%s\n' "$MAN" "$EXP"
	    fi
	}
    fi
}

#page
#### compound allocation and initialisation

function mpfr_alloc_and_init () {
    declare -n mpfr_p_PTR=${1:?"missing parameter 1 result MPFR pointer variable name in call to '$FUNCNAME'"}
    declare -r mpfr_p_PREC=$2

    if mmux_libc_calloc mpfr_p_PTR 1 "$mpfr_SIZEOF_MPFR"
    then
	if ! {
		if test -z "$mpfr_p_PREC" -o "$mpfr_p_PREC" = '0'
		then mpfr_init  "$mpfr_p_PTR"
		else mpfr_init2 "$mpfr_p_PTR" "$mpfr_p_PREC"
		fi
	    }
	then mmux_libc_free "$mpfr_p_PTR"
	fi
    else return 1
    fi
}
function mpfr_clear_and_free () {
    declare -r mpfr_p_PTR=${1:?"missing parameter 1 MPFR pointer in call to '$FUNCNAME'"}

    if mpfr_clear "$mpfr_p_PTR"
    then mmux_libc_free "$mpfr_p_PTR"
    else return 1
    fi
}

#page
#### shell index arrays

function mpfr_alloc_shell_array () {
    declare -n mpfr_ARRY=${1:?"missing parameter 1 shell array name in call to '$FUNCNAME'"}
    declare -i mpfr_ADIM=${2:?"missing parameter 2 shell array dimension in call to '$FUNCNAME'"}
    declare -i mfr_IDX mpfr_JDX

    if ! mmux_libc_calloc 'mpfr_ARRY[0]' $mpfr_ADIM "$mpfr_SIZEOF_MPFR"
    then return 1
    fi

    for ((mfr_IDX=0, mpfr_JDX=1; mpfr_JDX < mpfr_ADIM; ++mfr_IDX, ++mpfr_JDX))
    do
	if ! mmux_pointer_add "mpfr_ARRY[$mpfr_JDX]" "${mpfr_ARRY[$mfr_IDX]}" "$mpfr_SIZEOF_MPFR"
	then
	    mmux_libc_free "${mpfr_ARRY[0]}"
	    return 1
	fi
    done
    return 0
}
function mpfr_free_shell_array () {
    declare -n mpfr_ARRY=${1:?"missing parameter 1 shell array name in call to '$FUNCNAME'"}

    mmux_libc_free "${mpfr_ARRY[0]}"
}

function mpfr_init_shell_array () {
    declare -n mpfr_ARRY=${1:?"missing parameter 1 shell array name in call to '$FUNCNAME'"}
    declare    PREC=$2
    declare -i mpfr_ADIM=${#mpfr_ARRY[@]}
    declare -i mfr_IDX

    if test -z "$PREC"
    then
	for ((mfr_IDX=0; mfr_IDX < mpfr_ADIM; ++mfr_IDX))
	do mpfr_init "${mpfr_ARRY[$mfr_IDX]}"
	done
    else
	for ((mfr_IDX=0; mfr_IDX < mpfr_ADIM; ++mfr_IDX))
	do mpfr_init2 "${mpfr_ARRY[$mfr_IDX]}" "$PREC"
	done
    fi
}
function mpfr_clear_shell_array () {
    declare -n mpfr_ARRY=${1:?"missing parameter 1 shell array name in call to '$FUNCNAME'"}
    declare -i mpfr_ADIM=${#mpfr_ARRY[@]}
    declare -i mfr_IDX

    for ((mfr_IDX=0; mfr_IDX < mpfr_ADIM; ++mfr_IDX))
    do mpfr_clear "${mpfr_ARRY[$mfr_IDX]}"
    done
}

function mpfr_alloc_and_init_shell_array () {
    declare -n mpfr_SUBARRY=${1:?"missing parameter 1 shell array name in call to '$FUNCNAME'"}
    declare -i mpfr_ADIM=${2:?"missing parameter 2 shell array dimension in call to '$FUNCNAME'"}
    declare    PREC=$3

    if mpfr_alloc_shell_array mpfr_SUBARRY $mpfr_ADIM
    then mpfr_init_shell_array mpfr_SUBARRY $PREC
    else return 1
    fi
}
function mpfr_clear_and_free_shell_array () {
    declare -n mpfr_SUBARRY=${1:?"missing parameter 1 shell array name in call to '$FUNCNAME'"}

    if mpfr_clear_shell_array mpfr_SUBARRY
    then mpfr_free_shell_array mpfr_SUBARRY
    else return 1
    fi
}

#page
#### let's go

if test -v MMUX_BASH_POINTERS_LIBRARY -a -n "$MMUX_BASH_POINTERS_LIBRARY"
then true
     # Not loaded yet.  So load it.
else source "@MMUX_BASH_POINTERS_LIBRARY@"
fi

mmux-bash-mpfr-library-load

### end of file
# Local Variables:
# mode: sh
# End:
