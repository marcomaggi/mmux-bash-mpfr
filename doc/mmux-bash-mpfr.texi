\input texinfo.tex
@c %**start of header
@setfilename mmux-bash-mpfr.info
@settitle MMUX Bash MPFR
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Local macros.
@c ------------------------------------------------------------

@ifinfo
@macro mbfl{}
@acronym{MBFL}
@end macro
@end ifinfo
@ifnotinfo
@macro mbfl{}
@acronym{mbfl}
@end macro
@end ifnotinfo

@ifinfo
@macro mmux{}
@acronym{MMUX}
@end macro
@end ifinfo
@ifnotinfo
@macro mmux{}
@acronym{mmux}
@end macro
@end ifnotinfo

@ifinfo
@macro mpfr{}
@acronym{MPFR}
@end macro
@end ifinfo
@ifnotinfo
@macro mpfr{}
@acronym{mpfr}
@end macro
@end ifnotinfo

@macro WW{VARNAME}
$@{\VARNAME\:?@}
@end macro

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      @mmux{} Bash @mpfr{}

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    @mmux{} Bash @mpfr{}

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           mmux-bash-mpfr

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{mrc.mgg@@gmail.com}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2024

@c ------------------------------------------------------------

@set PackageAutoconfPrefix              MMUX_BASH_MPFR
@set PackagePkgconfigModule             mmux-bash-mpfr
@set PackageLibsVar                     @env{MMUX_BASH_MPFR_LIBS}
@set PackageCflagsVar                   @env{MMUX_BASH_MPFR_CFLAGS}
@c This is the stem of the library in "libmmux-bash-mpfr.so".
@set PackageLibstem                     mmux-bash-mpfr
@set PackageApiPrefixLower              mmux_bash_mpfr_
@set PackageApiPrefixUpper              MMUX_BASH_MPFR_

@set PackageHeader                      mmux-bash-mpfr.h
@set PackageHeaderFile                  @file{@value{PackageHeader}}

@set GithubUrl                 @url{https://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}
@set DocumentationUrl          @url{https://marcomaggi.github.io/docs/@value{PACKAGE_NICKNAME}.html}

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @value{VERSION} of @value{PACKAGE}, a package implementing
additional builtin commands for the @gnu{} Bash shell; to do so it installs a C language library and
a shell script which is meant to be sourced in a Bash session or script.

This package implements an interface to the @emph{Multiple Precision Floating--Point Reliable
Library}, @mpfr{}.

This package is distributed under the terms of the @gnu{} General Public License (@gpl{}).

Development of this package takes place at:

@center @value{GithubUrl}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the @gnu{}
Free Documentation License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being ``@gnu{} Free Documentation License'' and ``@gnu{} Lesser
General Public License'', no Front--Cover Texts, and no Back--Cover Texts.  A copy of the license is
included in the section entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{VERSION}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* mmux-bash-mpfr: (mmux-bash-mpfr).     Additional GNU Bash builtins.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* variables::                   Global variables.
* init::                        Initialisation and finalisation.
* assignment::                  Assignment builtins.
* conversion::                  Converting numbers to other representations.
* arithmetic::                  Arithmetic builtins.
* io::                          Input, output, printing.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* shared library::              Using the shared library.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @value{VERSION} of @value{PACKAGE}, a package implementing
additional builtin commands for the @gnu{} Bash shell; to do so it installs a C language library and
a shell script which is meant to be sourced in a Bash session or script.

This package implements an interface to the @emph{Multiple Precision Floating--Point Reliable
Library}, @mpfr{}.

@example
declare X

mmux_libc_malloc X @WW{mpfr_SIZEOF}
mpfr_init @WW{X}
mpfr_set_d @WW{X} '1.23' @WW{MPFR_RNDN}
mpfr_clear @WW{X}
mmux_libc_free @WW{X}
@end example

This package depends upon the facilities of the external package @mmux{} Bash Pointers, @xref{Top,
@mmux{} Bash Pointers, @mmux{} Bash Pointers, mmux-bash-pointers}.

@menu
* overview install::            Installed files.
* overview linking::            Linking code with the library.
* overview conventions::        Conventions used in this documentation.
* overview retvals::            Return values of @mpfr{} functions.
@end menu

@c page
@node overview install
@section Installed files


@value{PACKAGE} installs a shell script, a ``shell library'', under @code{$datavar/bash}; for
example:

@center @file{/usr/local/share/bash/libmmux-bash-mpfr.bash}

@noindent
to use the builtins, we have to load the shell library using Bash's builtin @code{source}.  A shared
library, actually implementing the builtins, is installed under @code{$libdir}; for example:

@center @file{/usr/local/lib64/libmmux-bash-mpfr.so}

@noindent
the shared library is automatically loaded by the shell library.

A C language header file is also installed under @code{$includedir}, for example:

@center @file{/usr/local/include/mmux-bash-mpfr.h}

@noindent
we can write code that links to the shared library to reuse some of its facilities.

@c page
@c external documents

@include overview-linking.texi

@c page
@node overview conventions
@section Conventions used in this documentation


@macro MmuxBashMpfrArgConventionPlain{STEM,LOSTEM}
@item \STEM\
@cindex \STEM\, builtin argument
@cindex builtin argument \STEM\
@cindex argument \STEM\, for builtins
A string representation of a value of type @objtype{mmux_\LOSTEM\_t}.

@end macro

The following naming conventions for builtin and function parameters are used in this documentation:

@table @var
@item MPFR_PTR
@itemx MPFR_OP
@itemx MPFR_ROP
@cindex MPFR_PTR, builtin argument
@cindex builtin argument MPFR_PTR
@cindex argument MPFR_PTR, for builtins
@cindex MPFR_OP, builtin argument
@cindex builtin argument MPFR_OP
@cindex argument MPFR_OP, for builtins
A string representation of a pointer referencing an instance of @objtype{__mpfr_struct}.

@item MPFR_PTRVAR
@cindex MPFR_PTRVAR, builtin argument
@cindex builtin argument MPFR_PTRVAR
@cindex argument MPFR_PTRVAR, for builtins
The string representation of a shell variable name: the function taking it as parameter, when
successful, will store in the variable a string representation of a pointer referencing an instance
of @objtype{__mpfr_struct}.  If the function fails: the shell variable is left untouched.

@item MPFR_RND
@cindex MPFR_RND, builtin argument
@cindex builtin argument MPFR_RND
@cindex argument MPFR_RND, for builtins
A string representation of one of the @mpfr{} constants @samp{MPFR_RND*}.

@item MPFR_EXP
@cindex MPFR_EXP, builtin argument
@cindex builtin argument MPFR_EXP
@cindex argument MPFR_EXP, for builtins
A string representation of a value of type @objtype{mpfr_exp_t}.

@item MPFR_PREC
@cindex MPFR_PREC, builtin argument
@cindex builtin argument MPFR_PREC
@cindex argument MPFR_PREC, for builtins
A string representation of a value of type @objtype{mpfr_prec_t}.

@item STRVAR
@cindex MPFR_STRVAR, builtin argument
@cindex builtin argument MPFR_STRVAR
@cindex argument MPFR_STRVAR, for builtins
The string representation of a shell variable name: the function taking it as parameter, when
successful, will store in the variable a generated string.

@item MPF_PTR
@itemx MPF_OP
@itemx MPF_ROP
@cindex MPF_PTR, builtin argument
@cindex builtin argument MPF_PTR
@cindex argument MPF_PTR, for builtins
@cindex MPF_OP, builtin argument
@cindex builtin argument MPF_OP
@cindex argument MPF_OP, for builtins
@cindex MPF_ROP, builtin argument
@cindex builtin argument MPF_ROP
@cindex argument MPF_ROP, for builtins
A string representation of a pointer of type @objtype{mpf_ptr}.

@item MPQ_PTR
@itemx MPQ_OP
@itemx MPQ_ROP
@cindex MPQ_PTR, builtin argument
@cindex builtin argument MPQ_PTR
@cindex argument MPQ_PTR, for builtins
@cindex MPQ_OP, builtin argument
@cindex builtin argument MPQ_OP
@cindex argument MPQ_OP, for builtins
A string representation of a pointer of type @objtype{mpq_ptr}.

@item MPZ_PTR
@itemx MPZ_OP
@itemx MPZ_ROP
@cindex MPZ_PTR, builtin argument
@cindex builtin argument MPZ_PTR
@cindex argument MPZ_PTR, for builtins
@cindex MPZ_OP, builtin argument
@cindex builtin argument MPZ_OP
@cindex argument MPZ_OP, for builtins
@cindex MPZ_ROP, builtin argument
@cindex builtin argument MPZ_ROP
@cindex argument MPZ_ROP, for builtins
A string representation of a pointer of type @objtype{mpz_ptr}.

@MmuxBashMpfrArgConventionPlain{SLONG,slong}
@MmuxBashMpfrArgConventionPlain{ULONG,ulong}
@MmuxBashMpfrArgConventionPlain{SINTMAX,sintmax}
@MmuxBashMpfrArgConventionPlain{UINTMAX,uintmax}
@MmuxBashMpfrArgConventionPlain{FLOAT,float}
@MmuxBashMpfrArgConventionPlain{DOUBLE,double}
@MmuxBashMpfrArgConventionPlain{LDOUBLE,ldouble}
@MmuxBashMpfrArgConventionPlain{FLOAT128,float128}
@MmuxBashMpfrArgConventionPlain{DECIMAL64,decimal64}
@MmuxBashMpfrArgConventionPlain{DECIMAL128,decimal128}
@end table

@c page
@node overview retvals
@section Return values of @mpfr{} functions


Every function and bulitin defined by the shell library returns a meaningful value: true when
successful, false otherwise.  Among the reasons for returning false: wrong number of arguments;
invalid argument type.

@cindex @code{ERRNO}, shell variable
@cindex variable @code{ERRNO}, shell variable
@cindex shell variable @code{ERRNO}
If a builtin performs a call to a system function: that function might set the standard C language
@code{errno} variable; the builtin consumes the value, it clears @code{errno}, it might set the
shell variable @code{ERRNO} (when documented to do so), it returns false.

@cindex @code{ERRNO}, shell variable
@cindex shell variable @code{ERRNO}
If an argument to builtin is invalid: the builtin returns false and sets the shell variable
@code{ERRNO} to @samp{EINVAL}.

Many @mpfr{} C language functions return a useful(?) value; the corresponding builtin reserves the
return value to signal if an error occurred.  @mpfr{} function's return values are stored in a shell
variable named @code{MPFR_RV}.

@example
declare -a OPS

mpfr_alloc_and_init_shell_array OPS 3
@{
    declare -n ROP='OPS[0]' OP1='OPS[1]' OP2='OPS[2]'
    declare MPFR_RV

    mpfr_set_si @WW{OP1} 123 @WW{MPFR_RNDN}
    mpfr_set_si @WW{OP2} 456 @WW{MPFR_RNDN}

    mpfr_add @WW{ROP} @WW{OP1} @WW{OP2} @WW{MPFR_RNDN}
    printf '%d\n' "@WW{MPFR_RV}"  @print{} [whatever is returned by the C function mpfr_add()]
@}
mpfr_clear_and_free_shell_array OPS
@end example


@c page
@node variables
@chapter Global variables


The shell library installed by @value{PACKAGE} defines global variables to allow inspection of the
underlying C language platform.

@menu
* variables version::           Version variables.
* variables sizeof::            C language type sizes.
* variables constants::         C language constants.
@end menu

@c page
@node variables version
@section Version variables


The installed libraries follow version numbering as established by the @gnu{} Autotools.  For an
explanation of interface numbers as managed by @gnu{} Libtool @xref{Libtool versioning, interface,
Libtool's versioning system, libtool, Shared library support for @gnu{}}.


@defvr {Shell Variable} MMUX_BASH_MPFR_CURRENT
An integer representing the library interface current number.
@end defvr


@defvr {Shell Variable} MMUX_BASH_MPFR_REVISION
An integer representing the library interface current revision number.
@end defvr


@defvr {Shell Variable} MMUX_BASH_MPFR_AGE
An integer representing the library interface current age.
@end defvr

@c page
@node variables sizeof
@section C language type sizes


If a C language type referenced by one of the following variables is undefined: the corresponding
Bash variable is undefined; we can test this condition with @code{test -v}:

@example
if test -v mpfr_SIZEOF
then # implemented
else # not implemented
fi
@end example

@macro MmuxDefineGlobalVarSizeof{NAME,TYPE}
@defvar \NAME\_SIZEOF
Global variable holding the size, measured in bytes, of the C language type @code{\TYPE\}.
@end defvar

@end macro

@MmuxDefineGlobalVarSizeof{mpfr, __mpfr_struct}
@MmuxDefineGlobalVarSizeof{mpfr_exp, mpfr_exp_t}
@MmuxDefineGlobalVarSizeof{mpfr_rnd, mpfr_rnd_t}
@MmuxDefineGlobalVarSizeof{mpfr_prec, mpfr_prec_t}

@c page
@node variables constants
@section C language constants


If a C language constant referenced by one of the following variables is undefined: the
corresponding Bash variable is undefined; we can test this condition with @code{test -v}; to test if
the underlying platform implements the constant @code{MPFR_RNDN}, we can do:

@example
if test -v MPFR_RNDN
then # implemented
else # not implemented
fi
@end example

@macro MmuxDefineGlobalVarConstant{NAME}
@defvar \NAME\
Global variable holding the value of the C language constant @code{\NAME\}.
@end defvar

@end macro

@MmuxDefineGlobalVarConstant{MPFR_RNDN}
@MmuxDefineGlobalVarConstant{MPFR_RNDZ}
@MmuxDefineGlobalVarConstant{MPFR_RNDU}
@MmuxDefineGlobalVarConstant{MPFR_RNDD}
@MmuxDefineGlobalVarConstant{MPFR_RNDA}
@MmuxDefineGlobalVarConstant{MPFR_RNDF}
@MmuxDefineGlobalVarConstant{MPFR_RNDNA}

@c page
@node init
@chapter Initialisation and finalisation


@ref{overview conventions, Conventions used in this documentation}.


@deffn Builtin mpfr_init @var{MPFR_PTR}
@deffnx Builtin mpfr_init2 @var{MPFR_PTR} @var{MPFR_PREC}
@deffnx Builtin mpfr_clear @var{MPFR_PTR}
Interfaces to the C language functions @cfunc{mpfr_init}, @cfunc{mpfr_init2}, @cfunc{mpfr_init}.

@example
declare OP1 OP2

mmux_libc_calloc OP 1 @WW{mpfr_SIZEOF}
@{
    mpfr_init @WW{OP}
    @{
        mpfr_set_si @WW{OP} 123 @WW{MPFR_RNDN}
        mpfr_just_printit_dammit @WW{OP}
    @}
    mpfr_clear @WW{OP}
@}
mmux_libc_free @WW{OP}
@end example
@end deffn


@deffn Builtin mpfr_inits @varo{MPFR_PTR} @var{MPFR_PTR} @dots{}
@deffnx Builtin mpfr_inits2 @var{MFPR_PREC} @varo{MPFR_PTR} @var{MPFR_PTR} @dots{}
@deffnx Builtin mpfr_clears @varo{MPFR_PTR} @var{MPFR_PTR} @dots{}
Interfaces to the C language functions @cfunc{mpfr_inits}, @cfunc{mpfr_inits2}, @cfunc{mpfr_clears}.

@example
declare OP1 OP2

mmux_libc_calloc 2 OP1 @WW{mpfr_SIZEOF}
@{
    mmux_pointer_add OP2 @WW{OP1} @WW{mpfr_SIZEOF}

    mpfr_inits @WW{OP1} @WW{OP2}
    @{
        mpfr_set_si @WW{OP1} -12 @WW{MPFR_RNDN}
        mpfr_set_ui @WW{OP2} +34 @WW{MPFR_RNDN}
        mpfr_just_printit_dammit @WW{OP1}
        mpfr_just_printit_dammit @WW{OP2}
    @}
    mpfr_clears @WW{OP1} @WW{OP2}
@}
mmux_libc_free @WW{OP1}
@end example
@end deffn


It is possible to allocate and initialise a @mpfr{} number with a single function call:

@example
declare OP

mpfr_alloc_and_init OP
@{
    mpfr_set_si @WW{OP} 123 @WW{MPFR_RNDN}
    mpfr_just_printit_dammit @WW{OP}
@}
mpfr_clear_and_free @WW{OP}
@end example


@defun mpfr_alloc_and_init @var{MPFR_PTRVAR}
@defunx mpfr_alloc_and_init @var{MPFR_PTRVAR} @var{MPFR_PREC}
Allocate a new block of memory to hold the data structure of a @mpfr{} number; initialise the
number; store a pointer to the structure in @var{MPFR_PTRVAR}.

When the optional parameter @var{MPFR_PREC} is present: it is used as precision value to initialise
the number.
@end defun


@defun mpfr_clear_and_free @var{MPFR_PTR}
Clear the number referenced by the pointer then release the associated memory; it is meant to be
applied to the pointer generated by @func{mpfr_alloc_and_init}.
@end defun


It is possible to allocate a single block of memory for the data structures of multiple @mpfr{}
numbers; then we can initialise and finalise all the numbers with a single function call:

@example
declare -a OPS
declare -i DIM=5 IDX

mpfr_alloc_shell_array OPS @WW{DIM}
@{
    mpfr_init_shell_array OPS
    @{
        for ((IDX=0; IDX < $@{#OPS[@@]@}; ++IDX))
        do mpfr_set_si $@{OPS[@WW{IDX}]:?@} @WW{IDX} @WW{MPFR_RNDN}
        done

        # We can access the individual numbers.
        declare -n ROP=OPS[0]
        declare -n OP1=OPS[1]
        declare -n OP2=OPS[2]

        mpfr_just_printit_dammit @WW{ROP}
        mpfr_just_printit_dammit @WW{OP1}
        mpfr_just_printit_dammit @WW{OP2}
    @}
    mpfr_clear_shell_array OPS
@}
mpfr_free_shell_array OPS
@end example


@defun mpfr_alloc_shell_array @var{ARRYNAME} @var{DIM}
Allocate a single block of memory capable of holding @var{DIM} data structures each representing an
@mpfr{} number; store the pointers to the structures in the shell index array whose name is
@var{ARRYNAME}; the element at index @samp{0} holds the pointer to the memory block itself.
@end defun


@defun mpfr_free_shell_array @var{ARRYNAME}
Release the memory allocated by @func{mpfr_alloc_shell_array}; @var{ARRYNAME} must be the name of
the shell index array used to reference the memory block.
@end defun


@defun mpfr_init_shell_array @var{ARRYNAME}
@defunx mpfr_init_shell_array @var{ARRYNAME} @var{MPFR_PREC}
Initialise each @mpfr{} number whose pointer is stored in the shell index array named
@var{ARRYNAME}; the shell array itself must have been initialised by @func{mpfr_alloc_shell_array}.

When the optional parameter @var{MPFR_PREC} is present: is it used as precision to initialise all
the numbers.
@end defun


@defun mpfr_clear_shell_array @var{ARRYNAME}
Clear each @mpfr{} number whose pointer is stored in the shell index array named @var{ARRYNAME}; the
shell array itself must have been initialised by @func{mpfr_init_shell_array}.

This function only clears the numbers: to release the allocated memory we must use
@func{mpfr_free_shell_array}.
@end defun


@defun mpfr_alloc_and_init_shell_array @var{ARRYNAME} @var{DIM}
@defunx mpfr_alloc_and_init_shell_array @var{ARRYNAME} @var{DIM} @var{MPFR_PREC}
Perform the calls:

@example
mpfr_alloc_shell_array @var{ARRYNAME} @var{DIM}
mpfr_init_shell_array  @var{ARRYNAME} @var{MPFR_PREC}
@end example

@noindent
checking for errors.
@end defun


@defun mpfr_clear_and_free_shell_array @var{ARRYNAME}
Perform the calls:

@example
mpfr_clear_shell_array @var{ARRYNAME}
mpfr_free_shell_array  @var{ARRYNAME}
@end example

@noindent
checking for errors.
@end defun


@defun mpfr_set_default_prec @var{MPFR_PREC}
@defunx mpfr_get_default_prec @var{MPFR_PREC_VAR}
Interfaces to the C language functions @cfunc{mpfr_set_default_prec}, @cfunc{mpfr_get_default_prec}.

@example
declare -r NEW_PREC=17
declare PREC

mpfr_set_default_prec @WW{NEW_PREC}
mpfr_get_default_prec PREC
@WW{PREC}   @result{} 17
@end example
@end defun


@defun mpfr_set_prec @var{MPFR_OP} @var{MPFR_PREC}
@defunx mpfr_get_prec @var{MPFR_PREC_VAR} @var{MPFR_OP}
Interfaces to the C language functions @cfunc{mpfr_set_prec}, @cfunc{mpfr_get_prec}.
@end defun

@c page
@node assignment
@chapter Assignment builtins


To assign a value to a number we do:

@example
declare OP

mpfr_alloc_and_init OP
@{
    mpfr_set_d @WW{OP} '1.23' @WW{MPFR_RNDN}
    mpfr_just_printit_dammit @WW{OP}
@}
mpfr_clear_and_free @WW{OP}
@end example


@macro MmuxMpfrAssignmentBuiltin{FUNC,ARGSTEM}
@deffn Builtin \FUNC\ @var{MPFR_ROP} @var{\ARGSTEM\} @var{MPFR_RND}
Interface to the C language functions @cfunc{\FUNC\}.
@end deffn

@end macro

@macro MmuxMpfrAssignmentTwoExpBuiltin{FUNC,ARGSTEM}
@deffn Builtin \FUNC\ @var{MPFR_ROP} @var{\ARGSTEM\} @var{MPFR_EXP} @var{MPFR_RND}
Interface to the C language functions @cfunc{\FUNC\}.
@end deffn

@end macro

@MmuxMpfrAssignmentBuiltin{mpfr_set_si, SLONG}
@MmuxMpfrAssignmentBuiltin{mpfr_set_ui, ULONG}
@MmuxMpfrAssignmentBuiltin{mpfr_set_sj, SINTMAX}
@MmuxMpfrAssignmentBuiltin{mpfr_set_uj, UINTMAX}
@MmuxMpfrAssignmentBuiltin{mpfr_set_flt, FLOAT}
@MmuxMpfrAssignmentBuiltin{mpfr_set_d, DOUBLE}
@MmuxMpfrAssignmentBuiltin{mpfr_set_ld, LDOUBLE}
@MmuxMpfrAssignmentBuiltin{mpfr_set_float128, FLOAT128}
@MmuxMpfrAssignmentBuiltin{mpfr_set_decimal64, decimal64}
@MmuxMpfrAssignmentBuiltin{mpfr_set_decimal128, decimal128}
@MmuxMpfrAssignmentBuiltin{mpfr_set_z, MPZ_OP}
@MmuxMpfrAssignmentBuiltin{mpfr_set_q, MPQ_OP}
@MmuxMpfrAssignmentBuiltin{mpfr_set_f, MPF_OP}
@MmuxMpfrAssignmentBuiltin{mpfr_set, MPFR_OP}

@MmuxMpfrAssignmentTwoExpBuiltin{mpfr_set_si_2exp, SLONG}
@MmuxMpfrAssignmentTwoExpBuiltin{mpfr_set_ui_2exp, ULONG}
@MmuxMpfrAssignmentTwoExpBuiltin{mpfr_set_sj_2exp, SINTMAX}
@MmuxMpfrAssignmentTwoExpBuiltin{mpfr_set_uj_2exp, UINTMAX}
@MmuxMpfrAssignmentTwoExpBuiltin{mpfr_set_z_2exp, MPZ_PTR}


@deffn Builtin mpfr_set_str @var{MPFR_ROP} @var{STRING} @var{BASE} @var{MPFR_RND}
Interface to the C language functions @cfunc{mpfr_set_str}.

@example
declare -r STR='1234567890' BASE='10'
declare OP

mpfr_alloc_and_init OP
@{
    mpfr_set_str @WW{OP} @WW{STR} @WW{BASE} @WW{MPFR_RNDN}
    mpfr_just_printit_dammit @WW{OP}
@}
mpfr_clear_and_free @WW{OP}
@end example
@end deffn


@deffn Builtin mpfr_set_nan @var{MPFR_OP}
Interface to the C language functions @cfunc{mpfr_set_nan}.
@end deffn


@deffn Builtin mpfr_set_inf @var{MPFR_OP} @var{SIGN}
Interface to the C language functions @cfunc{mpfr_set_inf}.  The argument sign must be one among
@samp{+1}, @samp{0}, @samp{-1}.

@example
declare OP

mpfr_alloc_and_init OP
@{
    mpfr_set_inf @WW{OP} +1
    mpfr_just_printit_dammit @WW{OP}
@}
mpfr_clear_and_free @WW{OP}
@end example
@end deffn


@deffn Builtin mpfr_set_zero @var{MPFR_OP} @var{SIGN}
Interface to the C language functions @cfunc{mpfr_set_zero}.  The argument sign must be one among
@samp{+1}, @samp{0}, @samp{-1}.

@example
declare OP

mpfr_alloc_and_init OP
@{
    mpfr_set_zero @WW{OP} +1
    mpfr_just_printit_dammit @WW{OP}
@}
mpfr_clear_and_free @WW{OP}
@end example
@end deffn


@deffn Builtin mpfr_swap @vari{MPFR_OP} @varii{MPFR_OP}
Interface to the C language functions @cfunc{mpfr_swap}.
@end deffn


@macro MmuxInitAndSetBuiltin{FUNC,ARGSTEM}
@deffn Builtin \FUNC\ @var{MPFR_ROP} @var{\ARGSTEM\} @var{MPFR_RND}
Interface to the C language functions @cfunc{\FUNC\}.
@end deffn

@end macro

@MmuxInitAndSetBuiltin{mpfr_init_set_si,SLONG}
@MmuxInitAndSetBuiltin{mpfr_init_set_ui,ULONG}
@MmuxInitAndSetBuiltin{mpfr_init_set_d,DOUBLE}
@MmuxInitAndSetBuiltin{mpfr_init_set_ld,LDOUBLE}
@MmuxInitAndSetBuiltin{mpfr_init_set_z,MPZ_PTR}
@MmuxInitAndSetBuiltin{mpfr_init_set_q,MPQ_PTR}
@MmuxInitAndSetBuiltin{mpfr_init_set_f,MPF_PTR}
@MmuxInitAndSetBuiltin{mpfr_init_set,MPFR_PTR}

@c page
@node conversion
@chapter Converting numbers to other representations


To extract a value from a @mpfr{} number, we do:

@example
declare VAL OP

mpfr_alloc_and_init OP
@{
    mpfr_set_si @WW{OP} '123' @WW{MPFR_RNDN}

    if mpfr_fits_slong_p @WW{OP}
    then
        mpfr_get_si VAL @WW{OP} @WW{MPFR_RNDN}
        printf '%s\n' @WW{VAL}
    fi
@}
mpfr_clear_and_free @WW{OP}
@end example

@ref{overview conventions, Conventions used in this documentation}.

@c ------------------------------------------------------------------------

@macro MmuxMpfrDefineGetter{BUILTIN,ARGS}
@deffn Builtin \BUILTIN\ \ARGS\
Interface to the C language function @cfunc{\BUILTIN\}.
@end deffn

@end macro

@MmuxMpfrDefineGetter{mpfr_get_si, @var{SLONG_VAR} @var{MPFR_OP} @var{MPFR_RND}}
@MmuxMpfrDefineGetter{mpfr_get_ui, @var{ULONG_VAR} @var{MPFR_OP} @var{MPFR_RND}}
@MmuxMpfrDefineGetter{mpfr_get_sj, @var{SINTMAX_VAR} @var{MPFR_OP} @var{MPFR_RND}}
@MmuxMpfrDefineGetter{mpfr_get_uj, @var{UINTMAX_VAR} @var{MPFR_OP} @var{MPFR_RND}}
@MmuxMpfrDefineGetter{mpfr_get_flt, @var{FLOAT_VAR} @var{MPFR_OP} @var{MPFR_RND}}
@MmuxMpfrDefineGetter{mpfr_get_d, @var{DOUBLE_VAR} @var{MPFR_OP} @var{MPFR_RND}}
@MmuxMpfrDefineGetter{mpfr_get_ld, @var{LDOUBLE_VAR} @var{MPFR_OP} @var{MPFR_RND}}
@MmuxMpfrDefineGetter{mpfr_get_float128, @var{FLOAT128_VAR} @var{MPFR_OP} @var{MPFR_RND}}
@MmuxMpfrDefineGetter{mpfr_get_decimal64, @var{DECIMAL64_VAR} @var{MPFR_OP} @var{MPFR_RND}}
@MmuxMpfrDefineGetter{mpfr_get_decimal128, @var{DECIMAL128_VAR} @var{MPFR_OP} @var{MPFR_RND}}

@deffn Builtin mpfr_get_z @var{MPZ_ROP} @var{MPFR_OP} @var{MPFR_RND}
Interface to the C language function @cfunc{mpfr_get_z}.
@end deffn


@deffn Builtin mpfr_get_q @var{MPQ_ROP} @var{MPFR_OP} @var{MPFR_RND}
Interface to the C language function @cfunc{mpfr_get_q}.
@end deffn


@deffn Builtin mpfr_get_f @var{MPF_ROP} @var{MPFR_OP} @var{MPFR_RND}
Interface to the C language function @cfunc{mpfr_get_f}.
@end deffn

@c ------------------------------------------------------------------------

@deffn Builtin mpfr_get_d_2exp @var{MANTISSA_VAR} @var{EXPONENT_VAR} @var{MPFR_OP} @var{MPFR_RND}
Interface to the C language function @cfunc{mpfr_get_d_2exp}.

@example
declare MAN EXP OP

mpfr_alloc_and_init OP
@{
    mpfr_set_d @WW{OP} '1.23' @WW{MPFR_RNDN}
    mpfr_get_si VAL @WW{OP} @WW{MPFR_RNDN}

    mmux_double_set_format "%f"
    mpfr_get_d_2exp MAN EXP @WW{OP} @WW{MPFR_RNDN}
@}
mpfr_clear_and_free @WW{OP}

@WW{MAN}        @result{} 0.615000
@WW{EXP}        @result{} 1
@end example
@end deffn


@deffn Builtin mpfr_get_ld_2exp @var{MANTISSA_VAR} @var{EXPONENT_VAR} @var{MPFR_OP} @var{MPFR_RND}
Interface to the C language function @cfunc{mpfr_get_ld_2exp}.
@end deffn


@deffn Builtin mpfr_get_z_2exp @var{EXPONENT_VAR} @var{MPZ_ROP} @var{MPFR_OP}
Interface to the C language function @cfunc{mpfr_get_z_2exp}.
@end deffn

@c ------------------------------------------------------------------------

@deffn Builtin mpfr_frexp @var{EXPONENT_VAR} @vari{MPFR_OP} @varii{MPFR_OP} @var{MPFR_RND}
Interface to the C language function @cfunc{mpfr_frexp}.

@example
declare -a OPS

mpfr_alloc_and_init_shell_array OPS
@{
    declare -n X='OPS[0]' Y='OPS[1]'
    declare EXP

    mpfr_set_d @WW{OP} '1.23' @WW{MPFR_RNDN}

    mpfr_frexp EXP @WW{Y} @WW{X} @WW{MPFR_RNDN}

    printf '%s\n' @WW{EXP}              @print{} 1
    mpfr_just_printit_dammit @WW{Y}     @print{} 0.615000e0
@}
mpfr_clear_and_free_shell_array OPS
@end example
@end deffn


@c ------------------------------------------------------------------------

@deffn Builtin mpfr_get_str @var{MANTISSA_VAR} @var{EXPONENT_VAR} @var{BASE} @var{NDIGITS} @var{MPFR_OP} @var{MPFR_RND}
Interface to the C language function @cfunc{mpfr_get_str}.

The argument @var{MANTISSA_VAR} must be a string representing a shell variable name; when
successful, this function stores a string representation of the mantissa in this variable; if an
error occurs, the variable is left untouched, unless there is an error setting the result variables
themselves.

The argument @var{EXPONENT_VAR} must be a string representing a shell variable name; when
successful, this function stores a string representation of the exponent in this variable; if an
error occurs, the variable is left untouched, unless there is an error setting the result variables
themselves.

@example
declare -ri BASE=10 NDIGITS=0
declare OP MAN EXP

mpfr_alloc_and_init OP
@{
    mpfr_set_d @WW{OP} '1.23' @WW{MPFR_RNDN}
    mpfr_get_str MAN EXP @WW{BASE} @WW{NDIGITS} @WW{OP} @WW{MPFR_RNDN}
@}
mpfr_clear_and_free @WW{OP}

@WW{MAN}            @result{} 12300000000000000
@WW{EXP}            @result{} 1
@end example
@end deffn

@c ------------------------------------------------------------------------

@macro MmuxMpfrDefineFitser{STEM}
@deffn Builtin mpfr_fits_\STEM\_p @var{MPFR_OP} @var{MPFR_RND}
Interface to the C language function @cfunc{mpfr_fits_\STEM\_p}.
@end deffn

@end macro

@MmuxMpfrDefineFitser{sshort}
@MmuxMpfrDefineFitser{ushort}
@MmuxMpfrDefineFitser{sint}
@MmuxMpfrDefineFitser{uint}
@MmuxMpfrDefineFitser{slong}
@MmuxMpfrDefineFitser{ulong}
@MmuxMpfrDefineFitser{intmax}
@MmuxMpfrDefineFitser{uintmax}

@c ------------------------------------------------------------------------

@deffn Builtin mpfr_get_str_ndigits @var{SIZE_VAR} @var{BASE} @var{PREC}
Interface to the C language function @cfunc{mpfr_get_str_ndigits}.

@example
declare -ri BASE=10 PREC=7
declare SIZE

mpfr_get_str_ndigits SIZE @WW{BASE} @WW{PREC}
@WW{SIZE}       @result{} 4
@end example
@end deffn

@c page
@node arithmetic
@chapter Arithmetic builtins


@c page
@node io
@chapter Input, output, printing


@ref{overview conventions, Conventions used in this documentation}.


@deffn Builtin mpfr_dump @var{MPFR_PTR}
Interface to the C language function @cfunc{mpfr_dump}.

Printing an initialised but unset number:

@example
declare OP

mmux_libc_calloc OP 1 @WW{mpfr_SIZEOF}
mpfr_init @WW{OP}
mpfr_dump @WW{OP}   @print{} @@NaN@@
@end example

Printing an initialised and set number:

@example
declare OP

mmux_libc_calloc OP 1 @WW{mpfr_SIZEOF}
mpfr_init @WW{OP}
mpfr_set_d @WW{OP} '2.0'
mpfr_dump @WW{OP}
@print{} 0.10000000000000000000000000000000000000000000000000000E2
@end example
@end deffn


@defun mpfr_just_printit_dammit @var{MPFR_PTR}
Print to @stdout{} a string representation of @var{MPFR_PTR}, by default in base 10 with 6 digits;
the format is meant to resemble the standard @samp{%.6e}.

@example
declare OP

mmux_libc_calloc OP 1 @WW{mpfr_SIZEOF}
mpfr_init @WW{OP}
mpfr_set_d @WW{OP} '123.4567890' @WW{MPFR_RNDN}
mpfr_just_printit_dammit @WW{OP}
@print{} 0.123457e3
@end example
@end defun

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include gpl-3.0.texi
@include fdl-1.3.texi

@c page
@node shared library
@appendix Using the shared library


@value{PACKAGE} installs a shared library:

@center @file{libmmux-bash-mpfr.so}

@noindent
and a C language header:

@center @file{mmux-bash-mpfr.h}

@noindent
we can write code that links to the shared library to reuse some of its facilities.  @ref{overview
linking} for details.

@menu
* shared library version::      Version functions.
@end menu

@c page
@node shared library version
@appendixsec Version functions


The installed libraries follow version numbering as established by the @gnu{} Autotools.  For an
explanation of interface numbers as managed by @gnu{} Libtool @xref{Libtool versioning, interface,
Libtool's versioning system, libtool, Shared library support for @gnu{}}.


@deftypefun {char const *} mmux_bash_mpfr_version_string (void)
Return a pointer to a statically allocated @asciiz{} string representing the interface version
number.
@end deftypefun


@deftypefun int mmux_bash_mpfr_version_interface_current (void)
Return an integer representing the library interface current number.
@end deftypefun


@deftypefun int mmux_bash_mpfr_version_interface_revision (void)
Return an integer representing the library interface current revision number.
@end deftypefun


@deftypefun int mmux_bash_mpfr_version_interface_age (void)
Return an integer representing the library interface current age.
@end deftypefun

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DocumentationUrl}

@noindent
development takes place at:

@center @value{GithubUrl}

@noindent
the package @mmux{} Bash Pointers is available online:

@center @url{http://github.com/marcomaggi/mmux-bash-pointers/}

@noindent
the package @mbfl{} is available online:

@center @url{http://github.com/marcomaggi/mbfl/}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

